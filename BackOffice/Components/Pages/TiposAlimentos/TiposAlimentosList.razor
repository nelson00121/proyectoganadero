@page "/tipos-alimentos"
@page "/tipos-alimento"
@using Database.Models
@using BackOffice.Services
@inject ITiposAlimentoService TiposAlimentoService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Gestión de Tipos de Alimentos</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-6">
    <MudText Typo="Typo.h4" GutterBottom="true">Gestión de Tipos de Alimentos</MudText>
    
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <MudText Typo="Typo.h6">Lista de Tipos de Alimentos</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="Icons.Material.Filled.Add"
                              OnClick="OpenCreateDialog">
                        Nuevo Tipo de Alimento
                    </MudButton>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; padding: 2rem;">
                    <MudProgressCircular Indeterminate="true" />
                </div>
            }
            else
            {
                <MudTable Items="tiposAlimento" 
                         Hover="true" 
                         Dense="true"
                         Striped="true"
                         Loading="isLoading">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Nombre del Tipo</MudTh>
                        <MudTh>Descripción</MudTh>
                        <MudTh Style="text-align: center;">Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Nombre">
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary">@context.NombreTipo</MudChip>
                        </MudTd>
                        <MudTd DataLabel="Descripción">
                            <MudText Typo="Typo.body2">
                                @if (!string.IsNullOrEmpty(context.Descripcion))
                                {
                                    @(context.Descripcion.Length > 100 ? $"{context.Descripcion.Substring(0, 100)}..." : context.Descripcion)
                                }
                                else
                                {
                                    <span style="color: gray; font-style: italic;">Sin descripción</span>
                                }
                            </MudText>
                        </MudTd>
                        <MudTd Style="text-align: center;">
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                                <MudTooltip Text="Editar">
                                    <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                 Color="Color.Warning"
                                                 Size="Size.Small"
                                                 OnClick="() => OpenEditDialog(context)" />
                                </MudTooltip>
                                <MudTooltip Text="Eliminar">
                                    <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                 Color="Color.Error"
                                                 Size="Size.Small"
                                                 OnClick="() => DeleteTiposAlimento(context)" />
                                </MudTooltip>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem;">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Mostrando @((currentPage - 1) * pageSize + 1) a @(Math.Min(currentPage * pageSize, totalItems)) de @totalItems registros
                    </MudText>
                    
                    <MudPagination Count="@totalPages" 
                                  Selected="@currentPage" 
                                  SelectedChanged="OnPageChanged"
                                  ShowFirstButton="true"
                                  ShowLastButton="true"
                                  ShowPreviousButton="true"
                                  ShowNextButton="true"
                                  Rectangular="true"
                                  Size="Size.Small" />
                </div>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<TiposAlimento> tiposAlimento = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTiposAlimento();
    }

    private async Task LoadTiposAlimento()
    {
        isLoading = true;
        try
        {
            var result = await TiposAlimentoService.GetTiposAlimentoPaginadosAsync(currentPage, pageSize);
            tiposAlimento = result.tiposAlimento;
            totalItems = result.totalCount;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar tipos de alimentos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadTiposAlimento();
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<TiposAlimentoDialog>("Crear Tipo de Alimento", 
            new DialogParameters<TiposAlimentoDialog> 
            { 
                { x => x.IsEditMode, false } 
            });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadTiposAlimento();
            Snackbar.Add("Tipo de alimento creado exitosamente", Severity.Success);
        }
    }

    private async Task OpenEditDialog(TiposAlimento tiposAlimento)
    {
        var dialog = await DialogService.ShowAsync<TiposAlimentoDialog>("Editar Tipo de Alimento", 
            new DialogParameters<TiposAlimentoDialog> 
            { 
                { x => x.IsEditMode, true },
                { x => x.TiposAlimento, tiposAlimento }
            });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadTiposAlimento();
        }
    }

    private async Task DeleteTiposAlimento(TiposAlimento tiposAlimento)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Confirmar eliminación",
            $"¿Está seguro de que desea eliminar el tipo de alimento '{tiposAlimento.NombreTipo}'?",
            yesText: "Eliminar", 
            cancelText: "Cancelar");

        if (confirmed == true)
        {
            try
            {
                var success = await TiposAlimentoService.DeleteTiposAlimentoAsync(tiposAlimento.Id);
                if (success)
                {
                    await LoadTiposAlimento();
                    Snackbar.Add("Tipo de alimento eliminado exitosamente", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al eliminar el tipo de alimento", Severity.Error);
                }
            }
            catch (InvalidOperationException ex)
            {
                Snackbar.Add(ex.Message, Severity.Warning);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al eliminar tipo de alimento: {ex.Message}", Severity.Error);
            }
        }
    }
}