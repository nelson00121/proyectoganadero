@using Database.DTOS
@using BackOffice.Services
@using MudBlazor
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudText Typo="Typo.h6" Class="mb-4">Cambiar Contraseña</MudText>
            <MudText Typo="Typo.body2" Class="mb-4">Usuario: @UsuarioEmail</MudText>
            
            <MudForm @ref="form" @bind-IsValid="@isFormValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.CurrentPassword"
                                     Label="Contraseña Actual"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="La contraseña actual es obligatoria"
                                     InputType="InputType.Password"
                                     For="@(() => model.CurrentPassword)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.NewPassword"
                                     Label="Nueva Contraseña"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="La nueva contraseña es obligatoria"
                                     InputType="InputType.Password"
                                     Validation="@(new Func<string, IEnumerable<string>>(ValidateNewPassword))"
                                     For="@(() => model.NewPassword)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.ConfirmNewPassword"
                                     Label="Confirmar Nueva Contraseña"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="Confirme la nueva contraseña"
                                     InputType="InputType.Password"
                                     Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                                     For="@(() => model.ConfirmNewPassword)" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(!isFormValid || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Cambiando...</MudText>
            }
            else
            {
                <MudText>Cambiar Contraseña</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public int UsuarioId { get; set; }

    [Parameter] 
    public string UsuarioEmail { get; set; } = string.Empty;

    private MudForm form = default!;
    private bool isFormValid;
    private bool isSubmitting;

    private PasswordModel model = new();

    private IEnumerable<string> ValidateNewPassword(string newPassword)
    {
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            yield break;
        }

        if (newPassword.Length < 8)
        {
            yield return "La contraseña debe tener al menos 8 caracteres";
        }

        if (newPassword.Length > 100)
        {
            yield return "La contraseña no puede tener más de 100 caracteres";
        }
    }

    private IEnumerable<string> ValidateConfirmPassword(string confirmPassword)
    {
        if (model.NewPassword != confirmPassword)
        {
            yield return "Las contraseñas no coinciden";
        }
    }

    void Cancel()
    {
        MudDialog?.Close();
    }

    private async Task Submit()
    {
        if (!isFormValid) return;

        isSubmitting = true;
        try
        {
            var changePasswordDto = new ChangePasswordDto
            {
                CurrentPassword = model.CurrentPassword,
                NewPassword = model.NewPassword,
                ConfirmNewPassword = model.ConfirmNewPassword
            };

            var result = await UserService.ChangePasswordAsync(UsuarioId, changePasswordDto);
            if (result)
            {
                Snackbar.Clear();
                Snackbar.Add("Contraseña cambiada exitosamente", Severity.Success);
                MudDialog?.Close();
            }
            else
            {
                Snackbar.Clear();
                Snackbar.Add("La contraseña actual es incorrecta", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cambiar la contraseña: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class PasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }
}