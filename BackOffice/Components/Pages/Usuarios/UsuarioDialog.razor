@using Database.Models
@using Database.DTOS
@using BackOffice.Services
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 600px;">
            <MudForm @ref="form" @bind-IsValid="@isFormValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Email"
                                     Label="Email"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="El email es obligatorio"
                                     Validation="@(new EmailAddressAttribute() { ErrorMessage = "Debe ser un email válido" })"
                                     For="@(() => model.Email)" />
                    </MudItem>

                    @if (!IsEditMode)
                    {
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.Password"
                                         Label="Contraseña"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="La contraseña es obligatoria"
                                         InputType="InputType.Password"
                                         For="@(() => model.Password)" />
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="model.ConfirmPassword"
                                         Label="Confirmar Contraseña"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="Confirme la contraseña"
                                         InputType="InputType.Password"
                                         Validation="@(new Func<string, IEnumerable<string>>(ValidateConfirmPassword))"
                                         For="@(() => model.ConfirmPassword)" />
                        </MudItem>
                    }

                    <MudItem xs="12">
                        <MudSelect @bind-Value="model.EmpleadoId"
                                  Label="Empleado"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="Debe seleccionar un empleado"
                                  For="@(() => model.EmpleadoId)">
                            @foreach (var empleado in empleados)
                            {
                                <MudSelectItem T="int" Value="empleado.Id">
                                    @empleado.PrimerNombre @empleado.PrimerApellido
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSwitch @bind-Value="model.IsAdmin" 
                                  Label="Administrador" 
                                  Color="Color.Warning" />
                    </MudItem>

                    @if (IsEditMode)
                    {
                        <MudItem xs="12" sm="6">
                            <MudSwitch @bind-Value="model.Activo" 
                                      Label="Estado Activo" 
                                      Color="Color.Success" />
                        </MudItem>
                    }
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(!isFormValid || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Procesando...</MudText>
            }
            else
            {
                @(IsEditMode ? "Actualizar" : "Crear")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public bool IsEditMode { get; set; } = false;

    [Parameter] 
    public Usuario? Usuario { get; set; }

    private MudForm form = default!;
    private bool isFormValid;
    private bool isSubmitting;
    private List<Empleado> empleados = new();

    private UsuarioModel model = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEmpleados();
        
        if (IsEditMode && Usuario != null)
        {
            model = new UsuarioModel
            {
                Email = Usuario.Email,
                IsAdmin = Usuario.IsAdmin,
                Activo = Usuario.Activo,
                EmpleadoId = Usuario.EmpleadoId
            };
        }
        else
        {
            model.Activo = true;
        }
    }

    private async Task LoadEmpleados()
    {
        try
        {
            empleados = await UserService.GetEmpleadosAsync();
            if (IsEditMode && Usuario != null)
            {
                var currentEmpleado = empleados.FirstOrDefault(e => e.Id == Usuario.EmpleadoId);
                if (currentEmpleado == null)
                {
                    empleados.Add(Usuario.Empleado);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar empleados: {ex.Message}", Severity.Error);
        }
    }

    private IEnumerable<string> ValidateConfirmPassword(string confirmPassword)
    {
        if (!IsEditMode && model.Password != confirmPassword)
        {
            yield return "Las contraseñas no coinciden";
        }
    }

    void Cancel()
    {
        MudDialog?.Close();
    }

    private async Task Submit()
    {
        if (!isFormValid) return;

        isSubmitting = true;
        try
        {
            if (!IsEditMode && await UserService.EmailExistsAsync(model.Email))
            {
                Snackbar.Add("El email ya está en uso", Severity.Error);
                return;
            }

            if (IsEditMode && Usuario != null)
            {
                if (await UserService.EmailExistsAsync(model.Email, Usuario.Id))
                {
                    Snackbar.Add("El email ya está en uso", Severity.Error);
                    return;
                }

                var usuarioUpdateDto = new UsuarioUpdateDto
                {
                    Email = model.Email,
                    IsAdmin = model.IsAdmin,
                    Activo = model.Activo,
                    EmpleadoId = model.EmpleadoId
                };

                var result = await UserService.UpdateUsuarioAsync(Usuario.Id, usuarioUpdateDto);
                if (result != null)
                {
                    Snackbar.Clear();
                    Snackbar.Add("Usuario actualizado exitosamente", Severity.Success);
                    MudDialog?.Close();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Error al actualizar el usuario", Severity.Error);
                }
            }
            else
            {
                var usuarioCreateDto = new UsuarioCreateDto
                {
                    Email = model.Email,
                    Password = model.Password,
                    ConfirmPassword = model.ConfirmPassword,
                    IsAdmin = model.IsAdmin,
                    Activo = model.Activo,
                    EmpleadoId = model.EmpleadoId
                };

                var result = await UserService.CreateUsuarioAsync(usuarioCreateDto);
                if (result != null)
                {
                    Snackbar.Add("Usuario creado exitosamente", Severity.Success);
                    MudDialog?.Close();
                }
                else
                {
                    Snackbar.Add("Error al crear el usuario", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al procesar la solicitud: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class UsuarioModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public bool IsAdmin { get; set; }
        public bool Activo { get; set; } = true;
        public int EmpleadoId { get; set; }
    }
}