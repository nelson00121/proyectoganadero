@page "/estados-animales"
@rendermode InteractiveAuto
@using Database.Models
@using BackOffice.Services
@inject IEstadoAnimalService EstadoAnimalService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Gestión de Estados de Animales</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-6">
    <MudText Typo="Typo.h4" GutterBottom="true">Gestión de Estados de Animales</MudText>
    
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                    <MudText Typo="Typo.h6">Lista de Estados</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="Icons.Material.Filled.Add"
                              OnClick="OpenCreateDialog">
                        Nuevo Estado
                    </MudButton>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            @if (isLoading)
            {
                <div style="display: flex; justify-content: center; padding: 2rem;">
                    <MudProgressCircular Indeterminate="true" />
                </div>
            }
            else
            {
                <MudTable Items="estados" 
                         Hover="true" 
                         Dense="true"
                         Striped="true"
                         Loading="isLoading">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Nombre</MudTh>
                        <MudTh Style="text-align: center;">Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Nombre">
                            <MudChip T="string" Size="Size.Small" Color="GetEstadoColor(context.Nombre)">@context.Nombre</MudChip>
                        </MudTd>
                        <MudTd Style="text-align: center;">
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                             Color="Color.Warning"
                                             Size="Size.Small"
                                             OnClick="() => OpenEditDialog(context)" />
                                <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                             Color="Color.Error"
                                             Size="Size.Small"
                                             OnClick="() => DeleteEstado(context)" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 1rem;">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Mostrando @((currentPage - 1) * pageSize + 1) a @(Math.Min(currentPage * pageSize, totalItems)) de @totalItems registros
                    </MudText>
                    
                    <MudPagination Count="@totalPages" 
                                  Selected="@currentPage" 
                                  SelectedChanged="OnPageChanged"
                                  ShowFirstButton="true"
                                  ShowLastButton="true"
                                  ShowPreviousButton="true"
                                  ShowNextButton="true"
                                  Rectangular="true"
                                  Size="Size.Small" />
                </div>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<EstadosAnimale> estados = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadEstados();
    }

    private async Task LoadEstados()
    {
        isLoading = true;
        try
        {
            var result = await EstadoAnimalService.GetEstadosPaginadosAsync(currentPage, pageSize);
            estados = result.estados;
            totalItems = result.totalCount;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar estados: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadEstados();
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<EstadoAnimalDialog>("Crear Estado", 
            new DialogParameters<EstadoAnimalDialog> 
            { 
                { x => x.IsEditMode, false } 
            });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadEstados();
            Snackbar.Add("Estado creado exitosamente", Severity.Success);
        }
    }

    private async Task OpenEditDialog(EstadosAnimale estado)
    {
        var dialog = await DialogService.ShowAsync<EstadoAnimalDialog>("Editar Estado", 
            new DialogParameters<EstadoAnimalDialog> 
            { 
                { x => x.IsEditMode, true },
                { x => x.Estado, estado }
            });

        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadEstados();
            Snackbar.Add("Estado actualizado exitosamente", Severity.Success);
        }
    }

    private async Task DeleteEstado(EstadosAnimale estado)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Confirmar eliminación",
            $"¿Está seguro de que desea eliminar el estado '{estado.Nombre}'?",
            yesText: "Eliminar", 
            cancelText: "Cancelar");

        if (confirmed == true)
        {
            try
            {
                var success = await EstadoAnimalService.DeleteEstadoAsync(estado.Id);
                if (success)
                {
                    await LoadEstados();
                    Snackbar.Add("Estado eliminado exitosamente", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al eliminar el estado", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al eliminar estado: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetEstadoColor(string estado)
    {
        return estado?.ToLower() switch
        {
            "activo" => Color.Success,
            "enfermo" => Color.Warning,
            "muerto" => Color.Error,
            "vendido" => Color.Info,
            _ => Color.Primary
        };
    }
}