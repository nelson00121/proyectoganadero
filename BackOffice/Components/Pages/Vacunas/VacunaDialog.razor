@using Database.Models
@using Database.DTOS
@using BackOffice.Services
@using MudBlazor
@inject IVacunaService VacunaService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 600px;">
            <MudForm @ref="form" @bind-IsValid="@isFormValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Nombre"
                                     Label="Nombre de la Vacuna"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     RequiredError="El nombre de la vacuna es obligatorio"
                                     Validation="@(new Func<string, Task<IEnumerable<string>>>(ValidateNombre))"
                                     For="@(() => model.Nombre)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Descripcion"
                                     Label="DescripciÃ³n"
                                     Variant="Variant.Outlined"
                                     Lines="3"
                                     For="@(() => model.Descripcion)" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(!isFormValid || isSubmitting)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Procesando...</MudText>
            }
            else
            {
                @(IsEditMode ? "Actualizar" : "Crear")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; }

    [Parameter] 
    public bool IsEditMode { get; set; } = false;

    [Parameter] 
    public Vacuna? Vacuna { get; set; }

    private MudForm form = default!;
    private bool isFormValid;
    private bool isSubmitting;

    private VacunaCreateDto model = new();

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode && Vacuna != null)
        {
            model = new VacunaCreateDto
            {
                Id = Vacuna.Id,
                Nombre = Vacuna.Nombre,
                Descripcion = Vacuna.Descripcion
            };
        }
    }

    private async Task<IEnumerable<string>> ValidateNombre(string nombre)
    {
        var errors = new List<string>();
        
        if (string.IsNullOrWhiteSpace(nombre))
        {
            errors.Add("El nombre de la vacuna es obligatorio");
            return errors;
        }

        if (nombre.Length < 2)
        {
            errors.Add("El nombre debe tener al menos 2 caracteres");
            return errors;
        }

        if (nombre.Length > 100)
        {
            errors.Add("El nombre no puede exceder 100 caracteres");
            return errors;
        }

        try
        {
            var excludeId = IsEditMode && Vacuna != null ? Vacuna.Id : (int?)null;
            var exists = await VacunaService.NombreExistsAsync(nombre, excludeId);
            if (exists)
            {
                errors.Add("Este nombre de vacuna ya existe");
            }
        }
        catch (Exception)
        {
            errors.Add("Error al validar el nombre");
        }

        return errors;
    }

    void Cancel()
    {
        MudDialog?.Close();
    }

    private async Task Submit()
    {
        if (!isFormValid) return;

        isSubmitting = true;
        try
        {
            if (IsEditMode && Vacuna != null)
            {
                var result = await VacunaService.UpdateVacunaAsync(Vacuna.Id, model);
                if (result != null)
                {
                    Snackbar.Clear();
                    Snackbar.Add("Vacuna actualizada exitosamente", Severity.Success);
                    MudDialog?.Close();
                }
                else
                {
                    Snackbar.Clear();
                    Snackbar.Add("Error al actualizar la vacuna", Severity.Error);
                }
            }
            else
            {
                var result = await VacunaService.CreateVacunaAsync(model);
                if (result != null)
                {
                    Snackbar.Add("Vacuna creada exitosamente", Severity.Success);
                    MudDialog?.Close();
                }
                else
                {
                    Snackbar.Add("Error al crear la vacuna", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al procesar la solicitud: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}